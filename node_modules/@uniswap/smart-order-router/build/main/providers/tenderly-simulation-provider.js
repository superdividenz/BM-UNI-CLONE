"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenderlySimulator = exports.FallbackTenderlySimulator = exports.Simulator = void 0;
const sdk_core_1 = require("@uniswap/sdk-core");
const axios_1 = __importDefault(require("axios"));
const ethers_1 = require("ethers/lib/ethers");
const Erc20__factory_1 = require("../types/other/factories/Erc20__factory");
const SwapRouter02__factory_1 = require("../types/other/factories/SwapRouter02__factory");
const util_1 = require("../util");
const callData_1 = require("../util/callData");
const gas_factory_helpers_1 = require("../util/gas-factory-helpers");
const TENDERLY_BATCH_SIMULATE_API = (tenderlyBaseUrl, tenderlyUser, tenderlyProject) => `${tenderlyBaseUrl}/api/v1/account/${tenderlyUser}/project/${tenderlyProject}/simulate-batch`;
// We multiply tenderly gas limit by this to overestimate gas limit
const ESTIMATE_MULTIPLIER = 1.25;
/**
 * Provider for dry running transactions.
 *
 * @export
 * @class Simulator
 */
class Simulator {
    /**
     * Returns a new SwapRoute with updated gas estimates
     * All clients that extend this must set
     * simulationError = true in the returned SwapRoute
     * if simulation is not successful
     * @returns SwapRoute
     */
    constructor(provider) {
        this.provider = provider;
    }
    async userHasSufficientBalance(fromAddress, tradeType, amount, quote) {
        try {
            const neededBalance = tradeType == sdk_core_1.TradeType.EXACT_INPUT ? amount : quote;
            let balance;
            if (neededBalance.currency.isNative) {
                balance = await this.provider.getBalance(fromAddress);
            }
            else {
                const tokenContract = Erc20__factory_1.Erc20__factory.connect(neededBalance.currency.address, this.provider);
                balance = await tokenContract.balanceOf(fromAddress);
            }
            return balance.gte(ethers_1.BigNumber.from(neededBalance.quotient.toString()));
        }
        catch (e) {
            util_1.log.error(e, 'Error while checking user balance');
            return false;
        }
    }
    async simulate(fromAddress, swapRoute, amount, quote, l2GasData) {
        if (await this.userHasSufficientBalance(fromAddress, swapRoute.trade.tradeType, amount, quote)) {
            util_1.log.info('User has sufficient balance to simulate. Simulating transaction.');
            return this.simulateTransaction(fromAddress, swapRoute, l2GasData);
        }
        else {
            util_1.log.error('User does not have sufficient balance to simulate.');
            return Object.assign(Object.assign({}, swapRoute), { simulationError: true });
        }
    }
}
exports.Simulator = Simulator;
const checkTokenApproved = async (fromAddress, inputAmount, provider) => {
    const tokenContract = Erc20__factory_1.Erc20__factory.connect(inputAmount.currency.wrapped.address, provider);
    const allowance = await tokenContract.allowance(fromAddress, util_1.SWAP_ROUTER_ADDRESS);
    // Return true if token allowance is greater than input amount
    return allowance.gt(ethers_1.BigNumber.from(inputAmount.quotient.toString()));
};
class FallbackTenderlySimulator extends Simulator {
    constructor(tenderlyBaseUrl, tenderlyUser, tenderlyProject, tenderlyAccessKey, provider, v2PoolProvider, v3PoolProvider, tenderlySimulator) {
        super(provider);
        this.tenderlySimulator =
            tenderlySimulator !== null && tenderlySimulator !== void 0 ? tenderlySimulator : new TenderlySimulator(tenderlyBaseUrl, tenderlyUser, tenderlyProject, tenderlyAccessKey, v2PoolProvider, v3PoolProvider, provider);
        this.v2PoolProvider = v2PoolProvider;
        this.v3PoolProvider = v3PoolProvider;
    }
    async ethEstimateGas(fromAddress, route, l2GasData) {
        const currencyIn = route.trade.inputAmount.currency;
        const router = SwapRouter02__factory_1.SwapRouter02__factory.connect(util_1.SWAP_ROUTER_ADDRESS, this.provider);
        const estimatedGasUsed = await router.estimateGas['multicall(bytes[])']([route.methodParameters.calldata], {
            from: fromAddress,
            value: ethers_1.BigNumber.from(currencyIn.isNative ? route.methodParameters.value : '0'),
        });
        const { estimatedGasUsedUSD, estimatedGasUsedQuoteToken, quoteGasAdjusted, } = await (0, gas_factory_helpers_1.calculateGasUsed)(route.quote.currency.chainId, route, estimatedGasUsed, this.v2PoolProvider, this.v3PoolProvider, l2GasData);
        return (0, gas_factory_helpers_1.initSwapRouteFromExisting)(route, this.v2PoolProvider, this.v3PoolProvider, quoteGasAdjusted, estimatedGasUsed, estimatedGasUsedQuoteToken, estimatedGasUsedUSD);
    }
    async simulateTransaction(fromAddress, swapRoute, l2GasData) {
        // Make call to eth estimate gas if possible
        // For erc20s, we must check if the token allowance is sufficient
        const inputAmount = swapRoute.trade.inputAmount;
        if (inputAmount.currency.isNative ||
            (await checkTokenApproved(fromAddress, inputAmount, this.provider))) {
            try {
                const swapRouteWithGasEstimate = await this.ethEstimateGas(fromAddress, swapRoute, l2GasData);
                return swapRouteWithGasEstimate;
            }
            catch (err) {
                util_1.log.info({ err: err }, 'Error calling eth estimate gas!');
                return Object.assign(Object.assign({}, swapRoute), { simulationError: true });
            }
        }
        // simulate via tenderly
        try {
            return await this.tenderlySimulator.simulateTransaction(fromAddress, swapRoute, l2GasData);
        }
        catch (err) {
            util_1.log.info({ err: err }, 'Failed to simulate via Tenderly!');
            // set error flag to true
            return Object.assign(Object.assign({}, swapRoute), { simulationError: true });
        }
    }
}
exports.FallbackTenderlySimulator = FallbackTenderlySimulator;
class TenderlySimulator extends Simulator {
    constructor(tenderlyBaseUrl, tenderlyUser, tenderlyProject, tenderlyAccessKey, v2PoolProvider, v3PoolProvider, provider) {
        super(provider);
        this.tenderlyBaseUrl = tenderlyBaseUrl;
        this.tenderlyUser = tenderlyUser;
        this.tenderlyProject = tenderlyProject;
        this.tenderlyAccessKey = tenderlyAccessKey;
        this.v2PoolProvider = v2PoolProvider;
        this.v3PoolProvider = v3PoolProvider;
    }
    async simulateTransaction(fromAddress, swapRoute, l2GasData) {
        const currencyIn = swapRoute.trade.inputAmount.currency;
        const tokenIn = currencyIn.wrapped;
        const chainId = tokenIn.chainId;
        if ([util_1.ChainId.CELO, util_1.ChainId.CELO_ALFAJORES].includes(chainId)) {
            const msg = 'Celo not supported by Tenderly!';
            util_1.log.info(msg);
            return Object.assign(Object.assign({}, swapRoute), { simulationError: true });
        }
        if (!swapRoute.methodParameters) {
            const msg = 'No calldata provided to simulate transaction';
            util_1.log.info(msg);
            throw new Error(msg);
        }
        const { calldata } = swapRoute.methodParameters;
        util_1.log.info({
            calldata: swapRoute.methodParameters.calldata,
            fromAddress: fromAddress,
            chainId: chainId,
            tokenInAddress: tokenIn.address,
        }, 'Simulating transaction via Tenderly');
        const approve = {
            network_id: chainId,
            input: callData_1.APPROVE_TOKEN_FOR_TRANSFER,
            to: tokenIn.address,
            value: '0',
            from: fromAddress,
            gasPrice: '0',
            gas: 30000000,
        };
        const swap = {
            network_id: chainId,
            input: calldata,
            to: util_1.SWAP_ROUTER_ADDRESS,
            value: currencyIn.isNative ? swapRoute.methodParameters.value : '0',
            from: fromAddress,
            gasPrice: '0',
            gas: 30000000,
            type: 1,
        };
        const body = { simulations: [approve, swap] };
        const opts = {
            headers: {
                'X-Access-Key': this.tenderlyAccessKey,
            },
        };
        const url = TENDERLY_BATCH_SIMULATE_API(this.tenderlyBaseUrl, this.tenderlyUser, this.tenderlyProject);
        const resp = (await axios_1.default.post(url, body, opts)).data;
        // Validate tenderly response body
        if (!resp ||
            resp.simulation_results.length < 2 ||
            !resp.simulation_results[1].transaction ||
            resp.simulation_results[1].transaction.error_message) {
            const msg = `Failed to Simulate Via Tenderly!: ${resp.simulation_results[1].transaction.error_message}`;
            util_1.log.info({ err: resp.simulation_results[1].transaction.error_message }, msg);
            return Object.assign(Object.assign({}, swapRoute), { simulationError: true });
        }
        util_1.log.info({ approve: resp.simulation_results[0], swap: resp.simulation_results[1] }, 'Simulated Approval + Swap via Tenderly');
        // Parse the gas used in the simulation response object, and then pad it so that we overestimate.
        const estimatedGasUsed = ethers_1.BigNumber.from((resp.simulation_results[1].transaction.gas_used * ESTIMATE_MULTIPLIER).toFixed(0));
        const { estimatedGasUsedUSD, estimatedGasUsedQuoteToken, quoteGasAdjusted, } = await (0, gas_factory_helpers_1.calculateGasUsed)(chainId, swapRoute, estimatedGasUsed, this.v2PoolProvider, this.v3PoolProvider, l2GasData);
        return (0, gas_factory_helpers_1.initSwapRouteFromExisting)(swapRoute, this.v2PoolProvider, this.v3PoolProvider, quoteGasAdjusted, estimatedGasUsed, estimatedGasUsedQuoteToken, estimatedGasUsedUSD);
    }
}
exports.TenderlySimulator = TenderlySimulator;
//# sourceMappingURL=data:application/json;base64,